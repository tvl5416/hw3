---
title: "Homework 3"
author: "[Taehwan Lee]{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
format: html
# format: pdf
---

---

::: {.callout-important style="font-size: 0.8em;"}

Please read the instructions carefully before submitting your assignment.

1. This assignment requires you to only upload a `PDF` file on Canvas
1. Don't collapse any code cells before submitting. 
1. Remember to make sure all your code output is rendered properly before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter before submitting your assignment ⚠️
:::

For this assignment, we will be using the [Wine Quality](https://archive.ics.uci.edu/ml/datasets/wine+quality) dataset from the UCI Machine Learning Repository. The dataset consists of red and white _vinho verde_ wine samples, from the north of Portugal. The goal is to model wine quality based on physicochemical tests

We will be using the following libraries:
```{R}
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(car)
library(glmnet)
library(broom)
library(corrplot)

```


<br><br><br><br>
---

## Question 1
::: {.callout-tip}
## 50 points
Regression with categorical covariate and $t$-Test
:::

###### 1.1 (5 points)

Read the wine quality datasets from the specified URLs and store them in data frames `df1` and `df2`.
```{R}
url1 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"

url2 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"


df1 <- read.csv(url1, sep = ";", stringsAsFactors = FALSE)
df2 <- read.csv(url2, sep = ";", stringsAsFactors = FALSE)
```


---

###### 1.2 (5 points)

Perform the following tasks to prepare the data frame `df` for analysis:

1. Combine the two data frames into a single data frame `df`, adding a new column called `type` to indicate whether each row corresponds to white or red wine. 
1. Rename the columns of `df` to replace spaces with underscores
1. Remove the columns `fixed_acidity` and `free_sulfur_dioxide`
1. Convert the `type` column to a factor
1. Remove rows (if any) with missing values.

```{R}
# 1. Combine the two data frames into a single data frame `df`, adding a new column called `type` to indicate whether each row corresponds to white or red wine.
df1$type <- 'white'
df2$type <- 'red'
df <- rbind(df1, df2)

# 2. Rename the columns of `df` to replace spaces with underscores
names(df) <- gsub(" ", "_", names(df))

# 3. Remove the columns 'fixed_acidity' and 'free_sulfur_dioxide'
df <- select(df, -c(fixed.acidity, free.sulfur.dioxide))

# 4. Convert the 'type' column to a factor
df$type <- as.factor(df$type)

# 5. Remove rows (if any) with missing values.
df <- drop_na(df)

dim(df)
```


Your output to `R dim(df)` should be
```
[1] 6497   11
```



---

###### 1.3 (20 points)

Recall from STAT 200, the method to compute the $t$ statistic for the the difference in means (with the equal variance assumption)

1. Using `df` compute the mean of `quality` for red and white wine separately, and then store the difference in means as a variable called `diff_mean`. 

2. Compute the pooled sample variance and store the value as a variable called `sp_squared`. 

3. Using `sp_squared` and `diff_mean`, compute the $t$ Statistic, and store its value in a variable called `t1`.


```{R}
# Using `df` compute the mean of `quality` for red and white wine separately, and then store the difference in means as a variable called `diff_mean`

mean_white <- mean(df[df$type == 'white',]$quality)
mean_red <- mean(df[df$type == 'red',]$quality)

diff_mean <- mean_white - mean_red

# Compute the pooled sample variance and store the value as a variable called `sp_squared`.

n_white <- nrow(df[df$type == 'white',])
n_red <- nrow(df[df$type == 'red',])
var_white <- var(df[df$type == 'white',]$quality)
var_red <- var(df[df$type == 'red',]$quality)

sp_squared <- ((n_white - 1)*var_white + (n_red - 1)*var_red) / (n_white + n_red - 2)

# Using `sp_squared` and `diff_mean`, compute the $t$ Statistic, and store its value in a variable called `t1`.

t1 <- diff_mean / sqrt(sp_squared * (1/n_white + 1/n_red))

diff_mean
sp_squared
t1
```



---

###### 1.4 (10 points)

Equivalently, R has a function called `t.test()` which enables you to perform a two-sample $t$-Test without having to compute the pooled variance and difference in means. 

Perform a two-sample t-test to compare the quality of white and red wines using the `t.test()` function with the setting `var.equal=TRUE`. Store the t-statistic in `t2`.

```{R}
t_test <- t.test(quality ~ type, data = df, var.equal = TRUE)

t2 <- t_test$statistic

t2
```



---

###### 1.5 (5 points)

Fit a linear regression model to predict `quality` from `type` using the `lm()` function, and extract the $t$-statistic for the `type` coefficient from the model summary. Store this $t$-statistic in `t3`.

```{R}
fit <- lm(quality ~ type, data = df)


summary_fit <- summary(fit)  # Get the summary of the fitted model
t3 <- summary_fit$coefficients["typewhite", "t value"]

summary_fit
t3
```



---

###### 1.6  (5 points)

Print a vector containing the values of `t1`, `t2`, and `t3`. What can you conclude from this? Why?

```{R}
c(t1, t2, t3)
```

The same size of the t values from different tests shows there's a real difference in quality between red and white wines. The direction of the difference flips in one test because of how we compared the wines. This tells that the way we set up our tests matters, but no matter how we do it, we see that red and white wines are different in quality.




<br><br><br><br>
<br><br><br><br>
---

## Question 2
::: {.callout-tip}
## 25 points
Collinearity
:::


---

###### 2.1 (5 points)

Fit a linear regression model with all predictors against the response variable `quality`. Use the `broom::tidy()` function to print a summary of the fitted model. What can we conclude from the model summary?


```{R}
model <- lm(quality ~ ., data = df)

tidy_summary <- tidy(model)

tidy_summary
```


---

###### 2.2 (10 points)

Fit two **simple** linear regression models using `lm()`: one with only `citric_acid` as the predictor, and another with only `total_sulfur_dioxide` as the predictor. In both models, use `quality` as the response variable. How does your model summary compare to the summary from the previous question?

```{R}
model_citric <- lm(quality ~ citric.acid, data = df)
summary(model_citric)

```


```{R}
model_sulfur <- lm(quality ~ total.sulfur.dioxide, data = df)
summary(model_sulfur)
```
The model with type as a predictor shows a significant difference in wine quality between red and white wines, with a notable t value of 9.686, highlighting a clear impact of wine type on quality. However, the simple models reveal that while individual components like citric_acid positively affect wine quality and total_sulfur_dioxide negatively impacts it.



---

###### 2.3 (5 points)

Visualize the correlation matrix of all numeric columns in `df` using `corrplot()`

```{R}
cor_matrix <- df %>% 
  select_if(is.numeric) %>% 
  cor()

# Visualize the correlation matrix
corrplot(cor_matrix)
```




---

###### 2.4 (5 points)

Compute the variance inflation factor (VIF) for each predictor in the full model using `vif()` function. What can we conclude from this?

```{R}
full_model <- lm(quality ~ ., data = df)

vif_values <- vif(full_model)

vif_values
```

The VIF numbers show that most things we measured don't have a big problem with overlapping information, except for "density" and "type" which are a bit high. This means "density" and "type" might be too similar to other things we measured, which can make the results less reliable for those two. 



<br><br><br><br>
<br><br><br><br>
---

## Question 3
::: {.callout-tip}
## 40 points

Variable selection
:::


---

###### 3.1 (5 points)

Run a backward stepwise regression using a `full_model` object as the starting model. Store the final formula in an object called `backward_formula` using the built-in `formula()` function in R

```{R}
library(stats)

backward_model <- step(full_model, direction = "backward")

backward_formula <- formula(backward_model)

backward_formula

```


---

###### 3.2 (5 points)

Run a forward stepwise regression using a `null_model` object as the starting model. Store the final formula in an object called `forward_formula` using the built-in `formula()` function in R

```{R}
null_model <- lm(quality ~ 1, data = df)

forward_model <- step(null_model, direction = "forward", scope = list(lower = formula(null_model), upper = formula(full_model)))

forward_formula <- formula(forward_model)


forward_formula
```




---

###### 3.3  (10 points)

1. Create a `y` vector that contains the response variable (`quality`) from the `df` dataframe. 

2. Create a design matrix `X` for the `full_model` object using the `make_model_matrix()` function provided in the Appendix. 

3. Then, use the `cv.glmnet()` function to perform LASSO and Ridge regression with `X` and `y`.

```{R}

library(glmnet)

y <- df$quality
X <- model.matrix(quality ~ ., data = df)[,-1] 


lasso <- cv.glmnet(X, y, alpha = 1) # LASSO 

ridge <- cv.glmnet(X, y, alpha = 1) # Ridge 
```



Create side-by-side plots of the ridge and LASSO regression results. Interpret your main findings. 

```{R}
par(mfrow=c(1, 2))

plot(ridge_model)
title("Ridge Regression")

plot(lasso_model)
title("LASSO Regression")
```

In the graphs, both Ridge and LASSO regression reach their lowest error at similar points, meaning they both find an optimal level of complexity around the same spot.


---

###### 3.4  (5 points)

Print the coefficient values for LASSO regression at the `lambda.1se` value? What are the variables selected by LASSO? 

```{R}
lasso_coef <- coef(lasso, s = "lambda.1se")
lasso_coef 
```
volatile.acidity, residual.sugar, chlorides, total.sulfur.dioxide, pH, sulphates, alcohol, typewhite      


Store the variable names with non-zero coefficients in `lasso_vars`, and create a formula object called `lasso_formula` using the `make_formula()` function provided in the Appendix. 

```{R}
make_formula <- function(x){
  as.formula(
    paste("quality ~ ", paste(x, collapse = " + "))
  )
}
# Store the variable names with non-zero coefficients
lasso_vars <- names(lasso_coef)[lasso_coef[,1] != 0]

lasso_vars
# Create the formula object
lasso_formula <- make_formula(lasso_vars)
```


---

###### 3.5  (5 points)

Print the coefficient values for ridge regression at the `lambda.1se` value? What are the variables selected here? 

Store the variable names with non-zero coefficients in `ridge_vars`, and create a formula object called `ridge_formula` using the `make_formula()` function provided in the Appendix. 
```{R}
ridge_coef <- coef(ridge, s = "lambda.1se")
print(ridge_coef)

# Store variable names with non-zero coefficients
ridge_vars <- names(ridge_coef)[ridge_coef != 0]

# Create the formula object
ridge_formula <- make_formula(ridge_vars)
```



---

###### 3.6  (10 points)

What is the difference between stepwise selection, LASSO and ridge based on you analyses above?

LASSO emphasizes variable selection by penalizing the absolute size of coefficients, leading some to become zero, thereby selecting a subset of variables. Conversely, ridge regression reduces coefficients overall by penalizing their squared size, usually retaining all variables with downweighted coefficients.





<br><br><br><br>
<br><br><br><br>
---

## Question 4
::: {.callout-tip}
## 70 points

Variable selection
:::

---

###### 4.1  (5 points)

Excluding `quality` from `df` we have $10$ possible predictors as the covariates. How many different models can we create using any subset of these $10$ coavriates as possible predictors? Justify your answer. 

The number of different models that can be created using any subset of the 10 covariates as predictors can be calculated using the formula for the total number of subsets of a set. Since each covariate can either be included or excluded from the model, there are 2 choices for each covariate. Therefore, the total number of different models is 
2^10, which equals 1024

---


###### 4.2  (20 points)

Store the names of the predictor variables (all columns except `quality`) in an object called `x_vars`.

```{R}
x_vars <- colnames(df %>% select(-quality))
```


Use: 

* the `combn()` function (built-in R function) and 
* the `make_formula()` (provided in the Appendix) 

to **generate all possible linear regression formulas** using the variables in `x_vars`. This is most optimally achieved using the `map()` function from the `purrr` package.
```{R}
formulas <- map(
  1:length(x_vars),
  \(x) {
    vars <- combn(x_vars, x)
    map(vars, ~ make_formula(.x))
  }
) %>% unlist()
```



If your code is right the following command should return something along the lines of:
```{R}
sample(formulas, 4) %>% as.character()

```

```R
sample(formulas, 4) %>% as.character()
# Output:
# [1] "quality ~ volatile_acidity + residual_sugar + density + pH + alcohol"                                                 
# [2] "quality ~ citric_acid"                                                                                                
# [3] "quality ~ volatile_acidity + citric_acid + residual_sugar + total_sulfur_dioxide + density + pH + sulphates + alcohol"
# [4] "quality ~ citric_acid + chlorides + total_sulfur_dioxide + pH + alcohol + type"  
```

---

###### 4.3  (10 points)
Use `map()` and `lm()` to fit a linear regression model to each formula in `formulas`, using `df` as the data source. Use `broom::glance()` to extract the model summary statistics, and bind them together into a single tibble of summaries using the `bind_rows()` function from `dplyr`.
```{R}
models <- map(formulas, ~lm(.x, data = df))

summaries <- map(models, glance)

summaries_df <- bind_rows(summaries, .id = "model_number")

summaries_df
```




---


###### 4.4  (5 points)

Extract the `adj.r.squared` values from `summaries` and use them to identify the formula with the _**highest**_ adjusted R-squared value.

```{R}
adj_r_squared <- map_dbl(summaries, "adj.r.squared")

max_index <- which.max(adj_r_squared)
max_index
```


Store resulting formula as a variable called `rsq_formula`.
```{R}
rsq_formula <- formulas[[max_index]]
rsq_formula
```



---

###### 4.5  (5 points)

Extract the `AIC` values from `summaries` and use them to identify the formula with the **_lowest_** AIC value.

```{R}
aic_values <- map_dbl(summaries, "AIC")

min_index <- which.min(aic_values)

min_index
```

Store resulting formula as a variable called `aic_formula`.


```{R}
aic_formula <- formulas[[min_index]]
aic_formula
```



---

###### 4.6  (15 points)

Combine all formulas shortlisted into a single vector called `final_formulas`.
```{R}
null_formula <- formula(null_model)
full_formula <- formula(full_model)

final_formulas <- c(
  null_formula,
  full_formula,
  backward_formula,
  forward_formula,
  lasso_formula, 
  ridge_formula,
  rsq_formula,
  aic_formula
)

final_formulas
```


* Are `aic_formula` and `rsq_formula` the same? How do they differ from the formulas shortlisted in question 3?

* Which of these is more reliable? Why? 

* If we had a dataset with $10,000$ columns, which of these methods would you consider for your analyses? Why?

---

###### 4.7  (10 points)


Use `map()` and `glance()` to extract the `sigma, adj.r.squared, AIC, df`, and `p.value` statistics for each model obtained from `final_formulas`. Bind them together into a single data frame `summary_table`. Summarize your main findings.
```{R}
summary_table <- map(
  final_formulas, 
  \(x) {
    model <- lm(x, data = df)
    glance(model)
  }
) %>% bind_rows()

summary_table %>% knitr::kable()
```

```R
summary_table <- map(
  final_formulas, 
  \(x) ... # Insert your code here
) %>% bind_rows()

summary_table %>% knitr::kable()
```





:::{.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br>
<br><br><br><br>
---


# Appendix


#### Convenience function for creating a formula object

The following function which takes as input a vector of column names `x` and outputs a `formula` object with `quality` as the response variable and the columns of `x` as the covariates. 

```R
make_formula <- function(x){
  as.formula(
    paste("quality ~ ", paste(x, collapse = " + "))
  )
}

# For example the following code will
# result in a formula object
# "quality ~ a + b + c"
make_formula(c("a", "b", "c"))
```

#### Convenience function for `glmnet`

The `make_model_matrix` function below takes a `formula` as input and outputs a **rescaled** model matrix `X` in a format amenable for `glmnet()`

```R
make_model_matrix <- function(formula){
  X <- model.matrix(formula, df)[, -1]
  cnames <- colnames(X)
  for(i in 1:ncol(X)){
    if(!cnames[i] == "typewhite"){
      X[, i] <- scale(X[, i])
    } else {
      colnames(X)[i] <- "type"
    }
  }
  return(X)
}
```




::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::